// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: server.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServerStream_ServerStream_FullMethodName = "/ServerStream.ServerStream/ServerStream"
)

// ServerStreamClient is the client API for ServerStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerStreamClient interface {
	ServerStream(ctx context.Context, in *Data, opts ...grpc.CallOption) (ServerStream_ServerStreamClient, error)
}

type serverStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewServerStreamClient(cc grpc.ClientConnInterface) ServerStreamClient {
	return &serverStreamClient{cc}
}

func (c *serverStreamClient) ServerStream(ctx context.Context, in *Data, opts ...grpc.CallOption) (ServerStream_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServerStream_ServiceDesc.Streams[0], ServerStream_ServerStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStreamServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerStream_ServerStreamClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type serverStreamServerStreamClient struct {
	grpc.ClientStream
}

func (x *serverStreamServerStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerStreamServer is the server API for ServerStream service.
// All implementations must embed UnimplementedServerStreamServer
// for forward compatibility
type ServerStreamServer interface {
	ServerStream(*Data, ServerStream_ServerStreamServer) error
	mustEmbedUnimplementedServerStreamServer()
}

// UnimplementedServerStreamServer must be embedded to have forward compatible implementations.
type UnimplementedServerStreamServer struct {
}

func (UnimplementedServerStreamServer) ServerStream(*Data, ServerStream_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedServerStreamServer) mustEmbedUnimplementedServerStreamServer() {}

// UnsafeServerStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerStreamServer will
// result in compilation errors.
type UnsafeServerStreamServer interface {
	mustEmbedUnimplementedServerStreamServer()
}

func RegisterServerStreamServer(s grpc.ServiceRegistrar, srv ServerStreamServer) {
	s.RegisterService(&ServerStream_ServiceDesc, srv)
}

func _ServerStream_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Data)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerStreamServer).ServerStream(m, &serverStreamServerStreamServer{stream})
}

type ServerStream_ServerStreamServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type serverStreamServerStreamServer struct {
	grpc.ServerStream
}

func (x *serverStreamServerStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// ServerStream_ServiceDesc is the grpc.ServiceDesc for ServerStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServerStream.ServerStream",
	HandlerType: (*ServerStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _ServerStream_ServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}

const (
	Bidirection_Bidirection_FullMethodName = "/ServerStream.Bidirection/Bidirection"
)

// BidirectionClient is the client API for Bidirection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidirectionClient interface {
	Bidirection(ctx context.Context, opts ...grpc.CallOption) (Bidirection_BidirectionClient, error)
}

type bidirectionClient struct {
	cc grpc.ClientConnInterface
}

func NewBidirectionClient(cc grpc.ClientConnInterface) BidirectionClient {
	return &bidirectionClient{cc}
}

func (c *bidirectionClient) Bidirection(ctx context.Context, opts ...grpc.CallOption) (Bidirection_BidirectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bidirection_ServiceDesc.Streams[0], Bidirection_Bidirection_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bidirectionBidirectionClient{stream}
	return x, nil
}

type Bidirection_BidirectionClient interface {
	Send(*Data) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type bidirectionBidirectionClient struct {
	grpc.ClientStream
}

func (x *bidirectionBidirectionClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bidirectionBidirectionClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BidirectionServer is the server API for Bidirection service.
// All implementations must embed UnimplementedBidirectionServer
// for forward compatibility
type BidirectionServer interface {
	Bidirection(Bidirection_BidirectionServer) error
	mustEmbedUnimplementedBidirectionServer()
}

// UnimplementedBidirectionServer must be embedded to have forward compatible implementations.
type UnimplementedBidirectionServer struct {
}

func (UnimplementedBidirectionServer) Bidirection(Bidirection_BidirectionServer) error {
	return status.Errorf(codes.Unimplemented, "method Bidirection not implemented")
}
func (UnimplementedBidirectionServer) mustEmbedUnimplementedBidirectionServer() {}

// UnsafeBidirectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidirectionServer will
// result in compilation errors.
type UnsafeBidirectionServer interface {
	mustEmbedUnimplementedBidirectionServer()
}

func RegisterBidirectionServer(s grpc.ServiceRegistrar, srv BidirectionServer) {
	s.RegisterService(&Bidirection_ServiceDesc, srv)
}

func _Bidirection_Bidirection_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BidirectionServer).Bidirection(&bidirectionBidirectionServer{stream})
}

type Bidirection_BidirectionServer interface {
	Send(*Response) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type bidirectionBidirectionServer struct {
	grpc.ServerStream
}

func (x *bidirectionBidirectionServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bidirectionBidirectionServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Bidirection_ServiceDesc is the grpc.ServiceDesc for Bidirection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bidirection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServerStream.Bidirection",
	HandlerType: (*BidirectionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Bidirection",
			Handler:       _Bidirection_Bidirection_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server.proto",
}
