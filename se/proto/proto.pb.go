// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto.proto

package Sestream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Data struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{0}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Response struct {
	Res                  string   `protobuf:"bytes,1,opt,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fcc84b9998d60d8, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetRes() string {
	if m != nil {
		return m.Res
	}
	return ""
}

func init() {
	proto.RegisterType((*Data)(nil), "Sestream.Data")
	proto.RegisterType((*Response)(nil), "Sestream.Response")
}

func init() { proto.RegisterFile("proto.proto", fileDescriptor_2fcc84b9998d60d8) }

var fileDescriptor_2fcc84b9998d60d8 = []byte{
	// 122 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x03, 0x93, 0x42, 0x1c, 0xc1, 0xa9, 0xc5, 0x25, 0x45, 0xa9, 0x89, 0xb9, 0x4a, 0x52,
	0x5c, 0x2c, 0x2e, 0x89, 0x25, 0x89, 0x42, 0x42, 0x5c, 0x2c, 0x29, 0x89, 0x25, 0x89, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x92, 0x0c, 0x17, 0x47, 0x50, 0x6a, 0x71, 0x41, 0x7e,
	0x5e, 0x71, 0xaa, 0x90, 0x00, 0x17, 0x73, 0x51, 0x6a, 0x31, 0x54, 0x1a, 0xc4, 0x34, 0xb2, 0xe3,
	0x82, 0x9b, 0x22, 0x64, 0x84, 0xc4, 0xe6, 0xd3, 0x83, 0x31, 0xf5, 0x40, 0x26, 0x4b, 0x09, 0x21,
	0xf8, 0x30, 0xd3, 0x94, 0x18, 0x0c, 0x18, 0x93, 0xd8, 0xc0, 0x4e, 0x31, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xa4, 0x00, 0xab, 0xef, 0x99, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SestreamClient is the client API for Sestream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SestreamClient interface {
	Sestream(ctx context.Context, in *Data, opts ...grpc.CallOption) (Sestream_SestreamClient, error)
}

type sestreamClient struct {
	cc *grpc.ClientConn
}

func NewSestreamClient(cc *grpc.ClientConn) SestreamClient {
	return &sestreamClient{cc}
}

func (c *sestreamClient) Sestream(ctx context.Context, in *Data, opts ...grpc.CallOption) (Sestream_SestreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sestream_serviceDesc.Streams[0], "/Sestream.Sestream/Sestream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sestreamSestreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sestream_SestreamClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type sestreamSestreamClient struct {
	grpc.ClientStream
}

func (x *sestreamSestreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SestreamServer is the server API for Sestream service.
type SestreamServer interface {
	Sestream(*Data, Sestream_SestreamServer) error
}

// UnimplementedSestreamServer can be embedded to have forward compatible implementations.
type UnimplementedSestreamServer struct {
}

func (*UnimplementedSestreamServer) Sestream(req *Data, srv Sestream_SestreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Sestream not implemented")
}

func RegisterSestreamServer(s *grpc.Server, srv SestreamServer) {
	s.RegisterService(&_Sestream_serviceDesc, srv)
}

func _Sestream_Sestream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Data)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SestreamServer).Sestream(m, &sestreamSestreamServer{stream})
}

type Sestream_SestreamServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type sestreamSestreamServer struct {
	grpc.ServerStream
}

func (x *sestreamSestreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _Sestream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Sestream.Sestream",
	HandlerType: (*SestreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sestream",
			Handler:       _Sestream_Sestream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto.proto",
}
