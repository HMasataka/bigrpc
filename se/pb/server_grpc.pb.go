// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: server.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Sestream_Sestream_FullMethodName = "/Sestream.Sestream/Sestream"
)

// SestreamClient is the client API for Sestream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SestreamClient interface {
	Sestream(ctx context.Context, in *Data, opts ...grpc.CallOption) (Sestream_SestreamClient, error)
}

type sestreamClient struct {
	cc grpc.ClientConnInterface
}

func NewSestreamClient(cc grpc.ClientConnInterface) SestreamClient {
	return &sestreamClient{cc}
}

func (c *sestreamClient) Sestream(ctx context.Context, in *Data, opts ...grpc.CallOption) (Sestream_SestreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Sestream_ServiceDesc.Streams[0], Sestream_Sestream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sestreamSestreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sestream_SestreamClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type sestreamSestreamClient struct {
	grpc.ClientStream
}

func (x *sestreamSestreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SestreamServer is the server API for Sestream service.
// All implementations must embed UnimplementedSestreamServer
// for forward compatibility
type SestreamServer interface {
	Sestream(*Data, Sestream_SestreamServer) error
	mustEmbedUnimplementedSestreamServer()
}

// UnimplementedSestreamServer must be embedded to have forward compatible implementations.
type UnimplementedSestreamServer struct {
}

func (UnimplementedSestreamServer) Sestream(*Data, Sestream_SestreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Sestream not implemented")
}
func (UnimplementedSestreamServer) mustEmbedUnimplementedSestreamServer() {}

// UnsafeSestreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SestreamServer will
// result in compilation errors.
type UnsafeSestreamServer interface {
	mustEmbedUnimplementedSestreamServer()
}

func RegisterSestreamServer(s grpc.ServiceRegistrar, srv SestreamServer) {
	s.RegisterService(&Sestream_ServiceDesc, srv)
}

func _Sestream_Sestream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Data)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SestreamServer).Sestream(m, &sestreamSestreamServer{stream})
}

type Sestream_SestreamServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type sestreamSestreamServer struct {
	grpc.ServerStream
}

func (x *sestreamSestreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// Sestream_ServiceDesc is the grpc.ServiceDesc for Sestream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sestream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Sestream.Sestream",
	HandlerType: (*SestreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sestream",
			Handler:       _Sestream_Sestream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}
